import { getServerName, getLavkaNumberHTML, createElementFromHTML, showElement, hideElement } from './utils.js';

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
export function performSearch(allMarketplacesData, itemSearch, serverFilter, loadingDiv, errorDiv, marketplacesSection) {
   const searchTerm = itemSearch.value.trim().toLowerCase();
   const selectedServer = parseInt(serverFilter.value);

   if (!searchTerm) {
      hideElement(errorDiv);
      return { shouldDisplayMarketplaces: selectedServer !== -1 };
   }

   if (selectedServer === -1) {
      throw new Error('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞');
   }

   showElement(loadingDiv);
   hideElement(errorDiv);
   hideElement(marketplacesSection);

   const serverMarketplaces = allMarketplacesData.filter(lot =>
      (lot.serverId ?? -1) === selectedServer
   );

   const sellResultsData = [];
   const buyResultsData = [];

   // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–¥–∞–∂–µ
   serverMarketplaces.forEach(lot => {
      if (Array.isArray(lot.items_sell) && Array.isArray(lot.price_sell)) {
         lot.items_sell.forEach((item, i) => {
            const price = lot.price_sell[i];
            const quantity = lot.count_sell?.[i] ?? 1;
            if (item && item.toLowerCase().includes(searchTerm) && price >= 0 && quantity > 0) {
               sellResultsData.push({
                  lavkaId: lot.LavkaUid,
                  username: lot.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                  serverId: lot.serverId,
                  userStatus: lot.userStatus || 0,
                  item,
                  price,
                  quantity
               });
            }
         });
      }
   });

   // –ü–æ–∏—Å–∫ –ø–æ —Å–∫—É–ø–∫–µ
   serverMarketplaces.forEach(lot => {
      if (Array.isArray(lot.items_buy) && Array.isArray(lot.price_buy)) {
         lot.items_buy.forEach((item, i) => {
            const price = lot.price_buy[i];
            const quantity = lot.count_buy?.[i] ?? 1;
            if (item && item.toLowerCase().includes(searchTerm) && price >= 0 && quantity > 0) {
               buyResultsData.push({
                  lavkaId: lot.LavkaUid,
                  username: lot.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                  serverId: lot.serverId,
                  userStatus: lot.userStatus || 0,
                  item,
                  price,
                  quantity
               });
            }
         });
      }
   });

   // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
   sellResultsData.sort((a, b) => a.price - b.price);
   buyResultsData.sort((a, b) => b.price - a.price);

   return { sellResultsData, buyResultsData, searchTerm, selectedServer };
}


// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π ===
export function displaySearchResults(
   sellData,
   buyData,
   searchTerm,
   selectedServer,
   resultsSection,
   resultsTabsContainer,
   sellResults,
   buyResults,
   loadingDiv
) {
   hideElement(loadingDiv);

   const serverText = ` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${getServerName(selectedServer)}`;
   const searchInfoHTML = `
      <div class="search-info">
         <h3>–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchTerm}"${serverText}</h3>
         <p><b>–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ:</b> ${sellData.length}</p>
         <p><b>–ü—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å–∫—É–ø–∫–µ:</b> ${buyData.length}</p>
      </div>
   `;

   // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   resultsSection.querySelector('.search-info')?.remove();
   resultsSection.insertBefore(createElementFromHTML(searchInfoHTML), resultsTabsContainer);

   // üî∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   function renderTable(data, type, sortBy = 'priceAsc') {
      if (data.length === 0) {
         return '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>';
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      const sorted = [...data];
      switch (sortBy) {
         case 'priceAsc': sorted.sort((a, b) => a.price - b.price); break;
         case 'priceDesc': sorted.sort((a, b) => b.price - a.price); break;
         case 'name': sorted.sort((a, b) => a.item.localeCompare(b.item)); break;
         case 'quantity': sorted.sort((a, b) => b.quantity - a.quantity); break;
         case 'seller': sorted.sort((a, b) => a.username.localeCompare(b.username)); break;
      }

      let html = `
         <div class="sort-controls">
            <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:</label>
            <select id="${type}SortSelect">
               <option value="priceAsc" ${sortBy === 'priceAsc' ? 'selected' : ''}>–¶–µ–Ω–µ ‚Üë</option>
               <option value="priceDesc" ${sortBy === 'priceDesc' ? 'selected' : ''}>–¶–µ–Ω–µ ‚Üì</option>
               <option value="name" ${sortBy === 'name' ? 'selected' : ''}>–ù–∞–∑–≤–∞–Ω–∏—é</option>
               <option value="quantity" ${sortBy === 'quantity' ? 'selected' : ''}>–ö–æ–ª–∏—á–µ—Å—Ç–≤—É</option>
               <option value="seller" ${sortBy === 'seller' ? 'selected' : ''}>–í–ª–∞–¥–µ–ª—å—Ü—É</option>
            </select>
         </div>
         <div class="table-container">
            <table class="results-table">
               <thead>
                  <tr>
                     <th>–õ–∞–≤–∫–∞</th>
                     <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                     <th>–¶–µ–Ω–∞</th>
                     <th>–ö–æ–ª-–≤–æ</th>
                     <th>–í–ª–∞–¥–µ–ª–µ—Ü</th>
                  </tr>
               </thead>
               <tbody>
      `;

      sorted.forEach(result => {
         html += `
            <tr>
               <td class="marketplace">${getLavkaNumberHTML(result.lavkaId, result.userStatus)}</td>
               <td class="item-name">${result.item}</td>
               <td class="price">${result.price.toLocaleString()}$</td>
               <td class="quantity">${result.quantity} —à—Ç.</td>
               <td class="seller">${result.username}</td>
            </tr>
         `;
      });

      html += '</tbody></table></div>';
      return html;
   }

   // –ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
   sellResults.innerHTML = renderTable(sellData, 'sell', 'priceAsc');
   buyResults.innerHTML = renderTable(buyData, 'buy', 'priceDesc');

   // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   sellResults.addEventListener('change', (e) => {
      if (e.target.id === 'sellSortSelect') {
         sellResults.innerHTML = renderTable(sellData, 'sell', e.target.value);
      }
   });

   buyResults.addEventListener('change', (e) => {
      if (e.target.id === 'buySortSelect') {
         buyResults.innerHTML = renderTable(buyData, 'buy', e.target.value);
      }
   });

   showElement(resultsSection);
}
