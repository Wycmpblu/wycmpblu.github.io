document.addEventListener('DOMContentLoaded', function () {
   const searchButton = document.getElementById('searchButton');
   const itemSearch = document.getElementById('itemSearch');
   const serverFilter = document.getElementById('serverFilter');
   const resultsDiv = document.getElementById('results');
   const loadingDiv = document.getElementById('loading');
   const errorDiv = document.getElementById('error');
   const loadMoreButton = document.getElementById('loadMoreButton');
   const loadMoreContainer = document.getElementById('loadMoreContainer');

   // –ö–∞—Ä—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤
   const serverNames = {
      '-1': '–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã',
      '0': 'Vice-City',
      '1': 'Phoenix',
      '2': 'Tucson',
      '3': 'Scottdale',
      '4': 'Chandler',
      '5': 'Brainburg',
      '6': 'SaintRose',
      '7': 'Mesa',
      '8': 'Red-Rock',
      '9': 'Yuma',
      '10': 'Surprise',
      '11': 'Prescott',
      '12': 'Glendale',
      '13': 'Kingman',
      '14': 'Winslow',
      '15': 'Payson',
      '16': 'Gilbert',
      '17': 'Show-Low',
      '18': 'Casa-Grande',
      '19': 'Page',
      '20': 'SunCity',
      '21': 'Queen-Creek',
      '22': 'Sedona',
      '23': 'Holiday',
      '24': 'Wednesday',
      '25': 'Yava',
      '26': 'Faraway',
      '27': 'Bumble Bee',
      '28': 'Christmas',
      '29': 'Mirage',
      '30': 'Love',
      '31': 'Drake',
      '32': 'Space'
   };

   // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   let currentResults = [];
   let currentSearchTerm = '';
   let currentSelectedServer = -1;
   let displayedCount = 0;
   const RESULTS_PER_PAGE = 30;

   // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
   hideElement(loadingDiv);
   hideElement(errorDiv);
   hideElement(loadMoreContainer);
   resultsDiv.innerHTML = '';

   // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
   itemSearch.value = '';

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
   function getServerName(serverId) {
      return serverNames[serverId.toString()] || `–°–µ—Ä–≤–µ—Ä ${serverId}`;
   }

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
   async function searchItemPrices(searchTerm) {
      if (!searchTerm) {
         showError('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
         return;
      }

      showElement(loadingDiv);
      hideElement(errorDiv);
      hideElement(loadMoreContainer);

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      resultsDiv.innerHTML = '';

      try {
         console.log(`üîç –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö: "${searchTerm}"`);
         const selectedServer = parseInt(serverFilter.value);

         const response = await fetch('https://raw.githubusercontent.com/FREYM1337/freym1337.github.io/refs/heads/main/data/markets.json');

         if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
         }

         const data = await response.json();

         const foundLots = [];

         data.forEach(lot => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–µ—Ä–≤–µ—Ä—É
            const lotServerId = lot.serverId !== undefined ? lot.serverId : -1;
            if (selectedServer !== -1 && lotServerId !== selectedServer) {
               return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–æ—Ç –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
            }

            if (lot.items_sell && Array.isArray(lot.items_sell)) {
               lot.items_sell.forEach((item, index) => {
                  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (case insensitive)
                  if (item && item.toLowerCase().includes(searchTerm.toLowerCase()) &&
                     lot.price_sell && lot.price_sell[index] !== undefined) {

                     foundLots.push({
                        itemName: item,
                        price: lot.price_sell[index],
                        quantity: lot.count_sell ? lot.count_sell[index] || 1 : 1,
                        seller: lot.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        marketplaceId: lot.LavkaUid || 'N/A',
                        serverId: lotServerId,
                        serverName: getServerName(lotServerId)
                     });
                  }
               });
            }
         });

         // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –Ω–∏–∑–∫–æ–π –∫ –≤—ã—Å–æ–∫–æ–π)
         foundLots.sort((a, b) => a.price - b.price);

         // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
         currentResults = foundLots;
         currentSearchTerm = searchTerm;
         currentSelectedServer = selectedServer;
         displayedCount = 0;

         displayResults();

      } catch (error) {
         showError(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      } finally {
         hideElement(loadingDiv);
      }
   }

   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
   function displayResults() {
      if (currentResults.length === 0) {
         const serverText = currentSelectedServer === -1 ? '' : ` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${getServerName(currentSelectedServer)}`;
         showError(`‚ùå –õ–æ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "${currentSearchTerm}"${serverText} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
         return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å
      const nextResults = currentResults.slice(displayedCount, displayedCount + RESULTS_PER_PAGE);
      displayedCount += nextResults.length;

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
      let tableHTML = '';

      if (displayedCount > RESULTS_PER_PAGE) {
         // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
         const existingTable = resultsDiv.querySelector('.results-table');
         if (existingTable) {
            const tbody = existingTable.querySelector('tbody');
            nextResults.forEach(lot => {
               tbody.innerHTML += `
                  <tr>
                     <td class="server">${lot.serverName}</td>
                     <td class="item-name">${lot.itemName}</td>
                     <td class="price">${lot.price.toLocaleString()}</td>
                     <td class="quantity">${lot.quantity} —à—Ç.</td>
                     <td class="seller">${lot.seller}</td>
                     <td class="marketplace">${lot.marketplaceId}</td>
                  </tr>
               `;
            });
         }
      } else {
         // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
         const serverText = currentSelectedServer === -1 ? '' : ` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ ${getServerName(currentSelectedServer)}`;

         tableHTML = `
            <div class="search-info">
               <h3>–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${currentSearchTerm}"${serverText}</h3>
               <p>–ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${currentResults.length}</p>
               <p class="results-count">–ü–æ–∫–∞–∑–∞–Ω–æ: ${displayedCount} –∏–∑ ${currentResults.length}</p>
            </div>
            <div class="table-container">
               <table class="results-table">
                  <thead>
                     <tr>
                        <th>–°–µ—Ä–≤–µ—Ä</th>
                        <th>–ü—Ä–µ–¥–º–µ—Ç</th>
                        <th>–¶–µ–Ω–∞</th>
                        <th>–ö–æ–ª-–≤–æ</th>
                        <th>–ü—Ä–æ–¥–∞–≤–µ—Ü</th>
                        <th>–õ–∞–≤–∫–∞</th>
                     </tr>
                  </thead>
                  <tbody>
         `;

         nextResults.forEach(lot => {
            tableHTML += `
               <tr>
                  <td class="server">${lot.serverName}</td>
                  <td class="item-name">${lot.itemName}</td>
                  <td class="price">${lot.price.toLocaleString()}</td>
                  <td class="quantity">${lot.quantity} —à—Ç.</td>
                  <td class="seller">${lot.seller}</td>
                  <td class="marketplace">${lot.marketplaceId}</td>
               </tr>
            `;
         });

         tableHTML += '</tbody></table></div>';
         resultsDiv.innerHTML = tableHTML;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const resultsCount = resultsDiv.querySelector('.results-count');
      if (resultsCount) {
         resultsCount.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${displayedCount} –∏–∑ ${currentResults.length}`;
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
      if (displayedCount < currentResults.length) {
         showElement(loadMoreContainer);
         loadMoreButton.disabled = false;
      } else {
         hideElement(loadMoreContainer);
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      resultsDiv.style.display = 'block';
   }

   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
   loadMoreButton.addEventListener('click', () => {
      loadMoreButton.disabled = true;
      loadMoreButton.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';

      setTimeout(() => {
         displayResults();
         loadMoreButton.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ 30';
      }, 100);
   });

   // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   function showElement(element) {
      if (element) {
         element.style.display = 'block';
      }
   }

   function hideElement(element) {
      if (element) {
         element.style.display = 'none';
      }
   }

   function showError(message) {
      if (errorDiv) {
         errorDiv.textContent = message;
         showElement(errorDiv);
      }
   }

   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
   searchButton.addEventListener('click', () => {
      const searchTerm = itemSearch.value.trim();
      searchItemPrices(searchTerm);
   });

   itemSearch.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
         const searchTerm = itemSearch.value.trim();
         searchItemPrices(searchTerm);
      }
   });
});